package models

import (
	"database/sql"
)

// Task represents the team model stored in our database
type Task struct {
	Title  string `schema:"title"`
}

// TaskService is a set of methods used to manipulate and
// work with the team model
type TaskService interface {
	TaskDB
}

// TaskDB is used to interact with the users database.
type TaskDB interface {
	ByUserID(id string) ([]Task, error)
	ByID(id string) (*Task, error)
	Create(team *Task) error
	Update(team *Task) error
	Delete(id string) error
}

// NewTaskService is the service for tasks
func NewTaskService(db *sql.DB) TaskService {
	return &taskService{
		TaskDB: &taskValidator{&taskSQL{db}},
	}
}

type taskService struct {
	TaskDB
}

type taskValidator struct {
	TaskDB
}

func (tv *taskValidator) Create(p *Task) error {
	if err := runTaskValFuncs(p,
		tv.titleRequired); err != nil {
		return err
	}

	return tv.TaskDB.Create(p)
}

func (tv *taskValidator) Update(p *Task) error {
	if err := runTaskValFuncs(p,
		tv.titleRequired); err != nil {
		return err
	}

	return tv.TaskDB.Update(p)
}

// Delete will delete the user with the provided ID
func (tv *taskValidator) Delete(id string) error {
	if id == "" {
		return ErrIDInvalid
	}
	return tv.TaskDB.Delete(id)
}

func (tv *taskValidator) titleRequired(p *Task) error {
	if p.Title == "" {
		return ErrTaskTitleRequired
	}
	return nil
}

type taskValFunc func(*Task) error

func runTaskValFuncs(task *Task, fns ...taskValFunc) error {
	for _, fn := range fns {
		if err := fn(task); err != nil {
			return err
		}
	}
	return nil
}

var _ TaskDB = &taskSQL{} // safety check

type taskSQL struct {
	db *sql.DB
}

// ByID will look up by the id provided.
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (psql *taskSQL) ByID(id string) (*Task, error) {
	var task Task
	//do the sql
	
	return &task, nil
}

func (psql *taskSQL) ByName(userID string) ([]Task, error) {
	var tasks []Task
	// do the sql
	
	return tasks, nil
}

func (psql *taskSQL) All(userID string) ([]Task, error) {
	var tasks []Task
	// do the sql
	
	return tasks, nil
}

// Create will create the provided team and backfill data
// like the ID, CreatedAt, and UpdatedAt fields
func (psql *taskSQL) Create(task *Task) error {
	return nil
}

// Update will update the provided team
func (psql *taskSQL) Update(task *Task) error {
	return nil
}

// Delete will delete the provided team
func (psql *taskSQL) Delete(id string) error {
	// ts.db.exec()
	return nil
}


